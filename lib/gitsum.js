#! /usr/bin/env node

// Generated by CoffeeScript 1.6.3
(function() {
  var app, arg3, arg4, arg5, branch, crypto, exec, express, help, http, interval, message, message_switch, mode, options, port, port_switch, push_commands, remote, remote_server, reques, server_commands,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exec = require('child_process').exec;
  remote = 'origin';

  branch = void 0;

  interval = void 0;

  remote_server = void 0;

  port = void 0;

  port_switch = void 0;

  mode = process.argv[2];

  arg3 = process.argv[3];

  arg4 = process.argv[4];

  arg5 = process.argv[5];

  help = 'look dude read the manual';

  message = 'gitsum push';

  server_commands = ['s', 'S', 'server'];

  push_commands = ['p', 'P', 'push'];

  message_switch = ['-m', '-M'];

  port_switch = ['-p', '-P'];

  if (__indexOf.call(server_commands, mode) >= 0) {
    port = 3013;
    if (__indexOf.call(port_switch, arg3) >= 0) {
      if (arg4 && /^\d+$/.test(arg4)) {
        port = arg4;
      } else {
        console.log("warning: please include a valid port number when using -p option");
      }
    }
    console.log('starting gitsum server...');
    console.log('server listening at ' + 'localhost' + ':' + port);
    express = require('express');
    app = express();
    app.listen(port);
    crypto = require('crypto');
    app.post('/gitsum', function(req, res) {
      var commit;
      commit = req.headers.commit;
      console.log('verifying commit ' + commit + '...');
      return exec('git pull', function(err, stdout, stderr) {
        return exec('git show ' + commit, function(err, stdout, stderr) {
          var addition, count, file, line, prev, temp_array, _i, _len, _results;
          temp_array = stdout.trim().split('\n');
          count = 0;
          _results = [];
          for (_i = 0, _len = temp_array.length; _i < _len; _i++) {
            line = temp_array[_i];
            if (~line.indexOf('new file mode')) {
              prev = temp_array[count - 1];
              if (prev && ~prev.indexOf('gitsum_token/')) {
                addition = prev.split('/');
                file = addition[addition.length - 1];
                exec('[ -f ./gitsum_server/' + file + ' ] && echo "1" || echo "0"', function(err, stdout, stderr) {
                  if (stdout.trim() === '1') {
                    console.log('commit verified!');
                    return exec('rm -rf ./gitsum_server', function(err, stdout, stderr) {
                      console.log('deploying...');
                      return exec('git reset --hard ' + commit, function(err, stdout, stderr) {
                        console.log('done!');
                        return res.send('1');
                      });
                    });
                  }
                });
              }
            }
            _results.push(count++);
          }
          return _results;
        });
      });
    });
    app.get('/gitsum', function(req, res) {
      var current_date, file_name, final, hash, i, ind, j, letter, mix, random, shake, temp, x_ip, _i, _len;
      current_date = (new Date()).valueOf().toString();
      random = Math.random().toString();
      shake = ['g', 'i', 't', 's', 'u', 'm'];
      ind = 0;
      for (_i = 0, _len = shake.length; _i < _len; _i++) {
        letter = shake[_i];
        if ((Math.floor(Math.random() * 2) + 1) === 1) {
          shake[ind] = letter.toLowerCase();
        } else {
          shake[ind] = letter.toUpperCase();
        }
        ind++;
      }
      shake = shake.join('');
      mix = [random, shake, current_date];
      i = mix.length - 1;
      while (i > 0) {
        j = Math.floor(Math.random() * (i + 1));
        temp = mix[i];
        mix[i] = mix[j];
        mix[j] = temp;
        i--;
      }
      final = mix.join('');
      hash = crypto.createHash('sha1').update(final).digest('hex');
      file_name = shake + '.' + hash;
      x_ip = req.headers['x-forwarded-for'];
      if (!x_ip) {
        x_ip = req.connection.remoteAddress;
      }
      console.log('\ntoken: ' + file_name + ' sent to ' + x_ip);
      return exec('rm -rf ./gitsum_server', function(err, stdout, stderr) {
        return exec('mkdir ./gitsum_server', function(err, stdout, stderr) {
          return exec('touch ./gitsum_server/' + file_name, function(err, stdout, stderr) {
            return res.send(file_name);
          });
        });
      });
    });
  } else if (__indexOf.call(push_commands, mode) >= 0 && arg3) {
    remote_server = arg3;
    if (__indexOf.call(message_switch, arg4) >= 0) {
      if (arg5) {
        message = arg5;
      } else {
        console.log("warning: please include a message when using -m option");
      }
    }
    http = require('http');
    options = {
      host: remote_server,
      port: 3013,
      path: '/gitsum',
      method: 'GET'
    };
    reques = http.request(options, function(response) {
      var str;
      str = '';
      response.on('data', function(chunk) {
        return str += chunk;
      });
      return response.on('end', function() {
        var phrase, secret, temp;
        str = str.trim();
        temp = str.split('.');
        phrase = temp[0];
        secret = temp[1];
        console.log('token received\n:-------------------------------------------------:\n: ' + str + ' :');
        console.log(':-------------------------------------------------:');
        console.log('overwriting ./gitsum_token');
        return exec('rm -rf ./gitsum_token', function(err, stdout, stderr) {
          return exec('git rm ./gitsum_token/*', function(err, stdout, stderr) {
            return exec('mkdir ./gitsum_token', function(err, stdout, stderr) {
              console.log('creating token file ./gitsum_token/' + str);
              return exec('touch ./gitsum_token/' + str, function(err, stdout, stderr) {
                console.log('adding all files');
                return exec('git add *', function(err, stdout, stderr) {
                  console.log('commiting with message "' + message + '"');
                  return exec('git commit -m "' + message + '"', function(err, stdout, stderr) {
                    return exec('git rev-parse --abbrev-ref HEAD', function(err, stdout, stderr) {
                      branch = stdout.trim();
                      console.log('pushing to ' + remote + ' ' + branch);
                      process.stdout.write('deploying to ' + remote_server + ' ');
                      interval = setInterval(function() {
                        return process.stdout.write('-');
                      }, 400);
                      return exec('git push ' + remote + ' ' + branch, function(err, stdout, stderr) {
                        return exec('git log -1 --format="%H"', function(err, stdout, stderr) {
                          var commit;
                          commit = stdout.trim();
                          options = {
                            host: remote_server,
                            port: 3013,
                            path: '/gitsum',
                            method: 'POST',
                            headers: {
                              'commit': commit
                            }
                          };
                          reques = http.request(options, function(response) {
                            var code;
                            clearInterval(interval);
                            process.stdout.write('> done!\n');
                            console.log('       _~');
                            console.log('    _~ )_)_~');
                            console.log('    )_))_))_)');
                            console.log('    _!__!__!__');
                            console.log('    \\ ' + phrase + ' /\n');
                            return process.exit(code = 0);
                          });
                          reques.write('');
                          return reques.end();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
    console.log('requesting token from ' + remote_server);
    reques.write('');
    reques.end();
  } else if (__indexOf.call(push_commands, mode) >= 0) {
    console.log('\nand where were you trying to push to, exactly?');
    console.log('try something like "gitsum push mysite.com" or "gitsum push 67.195.160.76"\n');
  } else {
    console.log(help);
  }

}).call(this);
